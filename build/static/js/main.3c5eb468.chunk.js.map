{"version":3,"sources":["utils/getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","web3","_web","provider","_web2","wrap","_context","prev","next","ethereum","Web3","enable","t0","console","log","providers","HttpProvider","stop","this","App","state","accounts","contract","owner","menuLength","menuName0","menuPrice0","menuName1","menuPrice1","menuName2","menuPrice2","isOwner","isWaiter","isCook","custOpenOrders","inputValue","item1qty","item1sub","openOrderQty","orderID1","orderID2","orderID3","orderStatus1","orderStatus2","orderStatus3","orderTable1","orderTable2","orderTable3","orderCustomer1","orderCustomer2","orderCustomer3","orderQty11","orderQty12","orderQty13","orderQty21","orderQty22","orderQty23","orderQty31","orderQty32","orderQty33","componentDidMount","networkId","deployedNetwork","instance","sent","eth","getAccounts","net","getId","BiteChainContract","networks","Contract","abi","address","_this","setState","loadMenu","alert","error","_callee2","_this$state","_menuLength","_item0","_item1","_item2","_isOwner","_isWaiter","_isCook","_openOrderQty","_context2","methods","getMenuLength","call","getMenu","getCook","getWaiter","getOpenOrders","event","value","react_default","createElement","i","className","isCustomer","id","align","width","border","name","evt","target","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c5eb468.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:9545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport BiteChainContract from \"./contracts/BiteChain.json\";\nimport getWeb3 from \"./utils/getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    web3: null,\n    accounts: null,\n    contract: null,\n    owner: null,\n    //Menu Info\n    menuLength: null,\n    menuName0: null,\n    menuPrice0: null,\n    menuName1: null,\n    menuPrice1: null,\n    menuName2: null,\n    menuPrice2: null,\n    // Role info\n    isOwner: null,\n    isWaiter: null,\n    isCook: null,\n    // Customer Order info\n    custOpenOrders: null,\n    inputValue: \"\",\n    item1qty: 0,\n    item1sub: 5,\n    // Get open order info\n    openOrderQty: 0,\n    // Can't figure out how to optimize, will just get state for EVERYTHING!\n    orderID1: null,\n    orderID2: null,\n    orderID3: null,\n    orderStatus1: null,\n    orderStatus2: null,\n    orderStatus3: null,\n    orderTable1: null,\n    orderTable2: null,\n    orderTable3: null,\n    orderCustomer1: null,\n    orderCustomer2: null,\n    orderCustomer3: null,\n    orderQty11: null,\n    orderQty12: null,\n    orderQty13: null,\n    orderQty21: null,\n    orderQty22: null,\n    orderQty23: null,\n    orderQty31: null,\n    orderQty32: null,\n    orderQty33: null\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = BiteChainContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        BiteChainContract.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.loadMenu);\n      //this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  loadMenu = async () => {\n    const { accounts, contract } = this.state;\n\n    //const _owner = await contract.methods.getowner().call();\n\n    const _menuLength = await contract.methods.getMenuLength().call();\n\n    // Replace with a clever foreach js loop later\n    const _item0 = await contract.methods.getMenu(0).call();\n    const _item1 = await contract.methods.getMenu(1).call();\n    const _item2 = await contract.methods.getMenu(2).call();\n\n    // Get Roles\n    const _isOwner = await contract.methods.getCook(accounts[0]).call();\n    const _isWaiter = await contract.methods.getCook(accounts[0]).call();\n    const _isCook = await contract.methods.getWaiter(accounts[0]).call();\n    // const _item1sub = this.refs.item1qty;\n\n    // Get Qty of open orders\n    const _openOrderQty = await contract.methods.getOpenOrders(0).call();\n\n    // Update state with the result.\n    this.setState({\n      menuLength: _menuLength,\n      menuName0: _item0[0],\n      menuPrice0: _item0[1],\n      menuName1: _item1[0],\n      menuPrice1: _item1[1],\n      menuName2: _item2[0],\n      menuPrice2: _item2[1],\n      isOwner: _isOwner,\n      isWaiter: _isWaiter,\n      isCook: _isCook,\n      openOrderQty: _openOrderQty[1]\n\n      // item1sub: _item1sub\n    });\n  };\n\n  //onChangeEvent test doesn't work!\n  changeQty(event) {\n    this.setState({ item1qty: event.value });\n  }\n\n  // test a function\n  //onGetOrderID(relID) = async () => {\n  //const response =  await contract.methods.getOpenOrders(relID).call()\n  //console.log(response);\n  //    this.setState({ openOrderID: response });\n  //}\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    // Set up the order table here\n\n    for (var i = 0; i < this.state.openOrderQty; i++) {\n      // Iterate over numeric indexes from 0 to 5, as everyone expects.\n      console.log(i);\n    }\n\n    return (\n      <div className=\"App\">\n        <h1>Welcome to BiteChain Dapp </h1>\n        <h2>Deployed to: {this.address}</h2>\n        <p>\n          Welcome, Acct: {this.state.accounts[0]} <br />\n          {this.state.custOpenOrders}\n          {this.state.isOwner ? \"You are logged in as an Owner. \" : \"\"}\n          {this.state.isWaiter ? \"You are logged in as a Waiter. \" : \"\"}\n          {this.state.isCook ? \"You are logged in as a Cook. \" : \"\"}\n          {this.state.isCustomer ? \"You are logged in as a Customer. \" : \"\"}\n        </p>\n        <table id=\"TopTable\" align=\"center\" width=\"800px\" border=\"1\">\n          <tr>\n            <td>\n              <table>\n                <tr>\n                  <th>Owner's Overview</th>\n                </tr>\n                <tr>\n                  <td>Open Orders: {this.state.openOrderQty}</td>\n                  <td />\n                </tr>\n                <tr>\n                  <td>Total Orders:</td>\n                  <td />\n                </tr>\n                <tr>\n                  <td>Wei in account:.,mn</td>\n                  <td />\n                </tr>\n              </table>\n            </td>\n            <td>\n              <table>\n                <tr>\n                  <td />\n                  <th align=\"center\">Order here!</th>\n                </tr>\n                <tr>\n                  <th>Available Items / Price in Wei</th>\n                  <th>QTY</th>\n                  <th>Cost</th>\n                </tr>\n                <tr>\n                  <td>\n                    {this.state.menuName0} - {this.state.menuPrice0}\n                  </td>\n                  <td>\n                    <select name=\"item0\" id=\"item0qty\">\n                      <option value=\"0\">0</option>\n                      <option value=\"1\">1</option>\n                      <option value=\"2\">2</option>\n                      <option value=\"3\">3</option>\n                      <option value=\"4\">4</option>\n                      <option value=\"5\">5</option>\n                    </select>\n                  </td>\n                  <td />\n                </tr>\n                <tr>\n                  <td>\n                    {this.state.menuName1} - {this.state.menuPrice1}\n                  </td>\n                  <td>\n                    <select name=\"item1\" id=\"item1qty\">\n                      <option value=\"0\">0</option>\n                      <option value=\"1\">1</option>\n                      <option value=\"2\">2</option>\n                      <option value=\"3\">3</option>\n                      <option value=\"4\">4</option>\n                      <option value=\"5\">5</option>\n                    </select>\n                  </td>\n                  <td />\n                </tr>\n                <tr>\n                  <td>\n                    {this.state.menuName2} - {this.state.menuPrice2}\n                  </td>\n                  <td>\n                    <select name=\"item2\" id=\"item2qty\">\n                      <option value=\"0\">0</option>\n                      <option value=\"1\">1</option>\n                      <option value=\"2\">2</option>\n                      <option value=\"3\">3</option>\n                      <option value=\"4\">4</option>\n                      <option value=\"5\">5</option>\n                    </select>\n                  </td>\n                  <td />\n                </tr>\n                <tr>\n                  <td />\n                  <td>\n                    <button>Submit Order</button>\n                  </td>\n                  <td />\n                </tr>\n              </table>\n            </td>\n          </tr>\n        </table>\n        <h2>Order Tracking</h2>\n        <h3>\n          (Ordering and tracking not implemented on React yet - please use Remix\n          for now)\n        </h3>\n        <table align=\"center\" border=\"1\" width=\"800px\">\n          <tr>\n            <th>\n              Ordered\n              <br />\n              For Waiter\n            </th>\n            <th>\n              Approved\n              <br />\n              For Cook\n            </th>\n            <th>\n              Cooking\n              <br />\n              For Cook\n            </th>\n            <th>\n              Ready\n              <br />\n              For Waiter\n            </th>\n          </tr>\n          <tr>\n            <td>\n              OrderID: x<br />\n              Customer: 0x00..1234\n              <br />\n              Table:5\n              <br />\n              <u>\n                <strong>Order:</strong>\n              </u>\n              <br /> Sandwich: 1<br /> Chicken:2\n              <br />\n              <button>Approve Order</button>\n            </td>\n            <td>\n              OrderID: x<br />\n              Customer: 0x00..1234\n              <br />\n              Table:5\n              <br />\n              <u>\n                <strong>Order:</strong>\n              </u>\n              <br /> Sandwich: 1<br /> Chicken:2\n              <br />\n              <button>Begin Cooking</button>\n            </td>\n            <td>\n              OrderID: x<br />\n              Customer: 0x00..1234\n              <br />\n              Table:5\n              <br />\n              <u>\n                <strong>Order:</strong>\n              </u>\n              <br /> Sandwich: 1<br /> Chicken:2\n              <br />\n              <button>Finished Cooking</button>\n            </td>\n            <td>\n              OrderID: x<br />\n              Customer: 0x00..1234\n              <br />\n              Table:5\n              <br />\n              <u>\n                <strong>Order:</strong>\n              </u>\n              <br /> Sandwich: 1<br /> Chicken:2\n              <br />\n              <button>Delivered Food</button>\n            </td>\n          </tr>\n        </table>\n      </div>\n    );\n  }\n\n  updateInputValue(evt) {\n    this.setState({\n      inputValue: evt.target.value\n    });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}